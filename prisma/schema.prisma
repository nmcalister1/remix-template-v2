// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  username String @unique
  passwordHash String
  hasAnsweredQuestion Boolean
  profilePicture String?
  fullname String?
  age String?
  description String?
  friends String[] @default([])
  posts Post[]
  comments Comment[]
  replies Reply[]
  repliess Replies[]
}

model Friendrequest{
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  senderUsername String
  receiverUsername String
}

model Post {
  postId String @id @default(uuid())
  posterId String
  posterUsername String
  posterProfilePicture String?
  poster User @relation(fields: [posterId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content String
  comment Comment[]
}

model Comment {
  commentId String @id @default(uuid())
  commenterId String
  commenterUsername String
  commenterProfilePicture String?
  commenter User @relation(fields: [commenterId], references: [id], onDelete: Cascade)
  commentsPostId String  
  commentsPost Post @relation(fields: [commentsPostId], references: [postId], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content String
  reply Reply[]
}

model Reply {
  replyId String @id @default(uuid())
  replyerId String
  replyerUsername String
  replyerProfilePicture String?
  replyer User @relation(fields: [replyerId], references: [id], onDelete: Cascade)
  replysCommentId String  
  replysCommentUsername String
  replysComment Comment @relation(fields: [replysCommentId], references: [commentId], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content String
  replies Replies[]
}

model Replies {
  replyToReplyId String @id @default(uuid())
  replyToReplyerId String
  replyToReplyerUsername String
  replyToReplyerProfilePicture String?
  replyToReplyer User @relation(fields: [replyToReplyerId], references: [id], onDelete: Cascade)
  replyToReplysReplyId String  
  replyToReplysReplyUsername String
  replyToReplysReply Reply @relation(fields: [replyToReplysReplyId], references: [replyId], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content String
}

model Question {
  questionId String @id @default("1")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  question String
  currentQuestionNumber Int
}



